<?xml version='1.0' encoding='UTF-8'?>
<processinginstructions xmlns="http://limatix.org/processtrak/processinginstructions" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dcv="http://limatix.org/dcvalue" xmlns:prx="http://limatix.org/processtrak/processinginstructions">
  <!-- Idea: Address inability to deal with multiple coupled experiment logs
       by being able to put inputfiles into different classes (class 
       attribute). Then in the elementmatch you can select which experiment 
       log to operate on with a class attribute there. -->
       
  <inputfiles>
    <!-- The <inputfiles> element is where you specify the input
	 experiment logs. These can be XML, or they can be .xls
	 or .xlsx spreadsheets (detected by filename extension).
	 In this case, any <dc:> tags you place within the
	 <inputfile> element will be placed in a <dc:summary>
	 tag of the outputfile -->
    <inputfile xlink:href="example_input.xlg">
      <outputfile xlink:href="example_input.xlp"/> <!-- if outputfile tag is omitted, outputfile defaults to original with extension changed to .xlp -->
    </inputfile>
    <!-- An <outputfile/> tag within the <inputfiles> element
	 (as opposed to within an <inputfile> element) creates
	 an output file derived from the <inputfiles> element,
	 containing a full listing of input and output files.
	 Such an output usually has a .pro extension and
	 is useful for combining data from multiple experiment
	 logs -->
  </inputfiles>
  
  <inputfilter xlink:href="filterscript" param1="-a" param2="-b"/> <!-- inputfilter is what is used to make initial conversion of inputfile to outputfile. It is run as a command with the specified parameters followed by the path to the input file and the path to the output file -->
    
  <hostname>pequod</hostname>  <!-- if specified, will only run on this hostname to prevent conflicts when file locking does not operate across hosts -->
  <elementmatch>xpath_condition</elementmatch>
  <inputfilematch>*.xlg</inputfilematch> <!-- can do wildard restriction of which input files to operate on, here or can be overridden in the <step> or <script> tags. -->

  <units_configuration unit_engine = "lm_units">
    <param name = "configstring">"insert_basic_units"</param>
  </units_configuration>

  <!-- example configuration for pint: 
  <units_configuration unit_engine = "pint">
    <param name="filename">path_to_units_definitionfile.pint</param>
    <param name="case_sensitive">False</param>
  </units_configuration>
    -->
  <step name="pullparams" descr="Pull in parameters from other files">
    <!-- Note: if you don't provide a step name, it uses the script name, 
	 with extension and path removed -->
    <!-- You can set the ordering of execution of matched elements
         with the <order> element:
         * Provide random="true" attribute to randomize order
         * Provide select="..." attribute to order based on sorting
           the value of an xpath expression. In this case also provide
           sort="string" or sort="numeric" attribute.
         * In a future version of processtrak, provide parallel="true"
           attribute to run multiple threads in parallel
         * If none of the above are provided, execute in document order
    -->
    <order select="@paramindex" sort="numeric"/>
    <script xlink:href="pullparams.py" function="run">     <!-- Note: You can explicitly specify the function to run (default is "rununlocked" or "run". If the name ends with "unlocked" then the function will be run with the xlp file unlocked.  You can reference an explicit path, by specifying the script with xlink:href, or  ask processtrak to search its script path by using "name" to specify the script. -->
      <!-- You can override the default elementmatch or filematch
           on a per-step basis -->
      <elementmatch>xpath_condition_override</elementmatch>
      
      <!-- Providing parameters: You can pass a parameter explicitly
           with the param element: -->
      <param name="bar">BAR</param>
	<!-- Can supply a condition. It is an xpath, evaluated in the context of the node 
             we are operating on. Two variables are supplied: $filepath:   path to .xlp file
             and $filename: filename portion of xlp file -->
        <!-- The way this works is you provide multiple value tags with different conditions
             and they are tested in order -->
      <param name="foo" condition="$filename='example_input_1.xlp'" dcv:units="kHz">34.5</param>
      <!-- in addition, if the Python or Matlab script has additional 
      named parameters beyond the ones listed here, those parameter
      names should start with a prefix (must be one of the xmlns 
      prefixes above) followed by an underscore followed by a tag name, 
      and the parameter will automatically be provided with the tag
      content. 

      In Python, this means the element itself. In Matlab this means
      a string representation.

      In Python, automatic parameters with the textual value of an element
      can be generated by appending "_text" to the parameter name. 
      Likewise, automatic parameters with the dc_value.hrefvalue of an element
      can be generated by appending "_href" to the parameter name, and
      automatic parameters with the hrefvalue of an element converted to
      a complete path can be generated by appending "_hreffullpath" to
      the parameter name

      -->
    </script>
  </step>
  
</processinginstructions>

